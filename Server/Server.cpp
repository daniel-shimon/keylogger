// Client.cpp : Defines the entry point for the console application.
//

#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <vector>
#include <string>
#include "ServerSocket.h"
#include "ConsoleLogger.h"
#define MAX_X 79
#define MAX_Y 23
#define PI 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460
using namespace std;

ServerSocket sock;
CConsoleLoggerEx mouse_console;
bool is_left_down(false);
bool is_right_down(false);
enum Wheel_Movement { UP, NONE, DOWN };
int mouse_num = 0;
char * pi = "3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460";

void PrintGrid()
{
	/*for (int y = 0; y <= MAX_Y; y++)
	{
		for (int x = 0; x <= MAX_X; x++)
		{
			mouse_console.print(" ");
		}
		mouse_console.print("\n");
	}*/
	mouse_console.gotoxy(0, MAX_Y+1);
	mouse_console.printf("-|-|-");
}

void ProccessInput(char* input, vector<POINT>& trail)
{
	if (input[0] == 'K')
	{
		char* clean_key_event = (input+1);
		cout << clean_key_event;
	} 
	else if (input[0] == 'M')
	{
		// Get X,Y:
		char Ccursor_x[3], Ccursor_y[3];
		POINT point;
		strncpy_s(Ccursor_x, (input + 1), 2);
		strncpy_s(Ccursor_y, (input + 3), 2);
		point.x = (atoi(Ccursor_x) / (double)99)*(MAX_X);
		point.y = (atoi(Ccursor_y) / (double)99)*(MAX_Y);
		Wheel_Movement wm = NONE;
		// Print X,Y:
		char p[2];
		p[0] = pi[mouse_num];
		p[1] = '\0';
		mouse_console.gotoxy(point.x, point.y);
		mouse_console.printf("\b");
		mouse_console.printf((const char*)p);
		// Get mouse event:
		char* ms_event = (input + 5);
		if (strcmp(ms_event, "LD") == 0) { is_left_down = true; mouse_num = 0; }
		else if (strcmp(ms_event, "LU") == 0) is_left_down = false;
		else if (strcmp(ms_event, "RD") == 0) { is_right_down = true; mouse_num = 0; }
		else if (strcmp(ms_event, "RU") == 0) is_right_down = false;
		else if (strcmp(ms_event, "MW+") == 0) { wm = UP; mouse_num = 0; }
		else if (strcmp(ms_event, "MW-") == 0) { wm = DOWN; mouse_num = 0; }
		// Print mouse event:
		ms_event = new char[10];
		SecureZeroMemory(ms_event, 10);
		if (is_left_down)
		{
			strcat_s(ms_event, 10, "V|");
		}
		else strcat_s(ms_event, 10, "-|");
		switch (wm)
		{
		case UP:
			strcat_s(ms_event, 10, "^|");
			break;
		case NONE:
			strcat_s(ms_event, 10, "-|");
			break;
		case DOWN:
			strcat_s(ms_event, 10, "V|");
			break;
		}
		if (is_right_down) strcat_s(ms_event, 10, "V");
		else strcat_s(ms_event, 10, "-");
		mouse_console.gotoxy(0, MAX_Y+1);
		mouse_console.printf(ms_event);
		// Trail:
		int t_size = trail.size();
		if (t_size == 0) trail.push_back(point);
		else if (!(point.x == trail.back().x && point.y == trail.back().y))
		{
			if (t_size >= 20)
			{
				for (int i = 0; i < t_size - 6; i++)
				{
					POINT delete_point = trail.at(0);
					mouse_console.gotoxy(delete_point.x, delete_point.y);
					mouse_console.printf("\b ");
					trail.erase(trail.begin());
				}
			}
			trail.push_back(point);
			mouse_num++;
		}
	}
}


int main()
{
	vector<tagPOINT> trail;
	sock.Init(1234);
	mouse_console.Create("Mouse Cursor");
	PrintGrid();
	sock.ListenAndAccept();
	cout << "connected\n";
	while (true)
	{
		char recvd[100];
		SecureZeroMemory(recvd, sizeof(recvd));
		sock.Receive(recvd, sizeof(recvd));
		ProccessInput(recvd, trail);
		// cout << recvd;
	}
	
}